import java.io.*;
import java.nio.file.*;
import java.util.*;

public class Second_Problem {

    public static void main(String[] args) {
        String filePath = "C:\\Users\\ajayp\\OneDrive\\Documents\\Downloads\\Input_02.txt";

        try {
            List<String> words = Files.readAllLines(Paths.get(filePath));
            long startTime = System.currentTimeMillis();


            Result result = findLongestCompoundedWords(words);

            long endTime = System.currentTimeMillis();
            System.out.println("Longest Compound Word: " + result.longest);
            System.out.println("Second Longest Compound Word: " + result.secondLongest);
            System.out.println("Time taken: " + (endTime - startTime) + " milliseconds");

        } catch (IOException e) {
            System.err.println("Error reading the file: " + e.getMessage());
        }
    }

    private static Result findLongestCompoundedWords(List<String> words) {
        // Sort words by length
        words.sort(Comparator.comparingInt(String::length));

        Set<String> wordSet = new HashSet<>(words);
        String longest = "";
        String secondLongest = "";

        for (String word : words) {
            if (isCompoundWord(word, wordSet, true)) {
                if (word.length() > longest.length()) {
                    secondLongest = longest;
                    longest = word;
                } else if (word.length() > secondLongest.length()) {
                    secondLongest = word;
                }
            }
        }

        return new Result(longest, secondLongest);
    }

    private static boolean isCompoundWord(String word, Set<String> wordSet, boolean isOriginalWord) {
        if (!isOriginalWord && wordSet.contains(word)) {
            return true;
        }

        for (int i = 1; i < word.length(); i++) {
            String prefix = word.substring(0, i);
            String suffix = word.substring(i);

            if (wordSet.contains(prefix) && isCompoundWord(suffix, wordSet, false)) {
                return true;
            }
        }

        return false;
    }

    private static class Result {
        String longest;
        String secondLongest;

        Result(String longest, String secondLongest) {
            this.longest = longest;
            this.secondLongest = secondLongest;
        }
    }
}

